#!/usr/bin/env node
var split = require('binary-split');
var through2 = require('through2');
var argv = require('minimist')(process.argv.slice(2));
var turf = require('turf');
var apply = require('./apply');
var multilove = require('multilove');

if (!argv.args) argv.args = '[$]';
if (argv.args[0] !== '[') argv.args = '[' + argv.args + ']';

process.stdin
  .pipe(split())
  .pipe(getProcessor(argv.P))
  .pipe(through2.obj(function (chunk, enc, done) {
    if (!chunk) return done(); // Toss out empty chunks
    if (typeof chunk === 'object') chunk = JSON.stringify(chunk);
    done(null, chunk + '\n')
  }))
  .pipe(process.stdout)
  .on('error', function (e) {
    console.error(e);
    throw e;
  });


function getProcessor(isParallel) {
  if (!isParallel) {
    // If not using parallelization, process chunks inline
    return through2.obj(function (chunk, enc, done) {
      this.push(apply(chunk, {
        done: done,
        push: this.push.bind(this),
        userOptions: {argv: argv}
      }));
    });
  } else {
    return multilove({
      worker: __dirname + '/apply.js',
      workerOptions: {
        argv: argv
      }
    });
  }
}
